groups:
  - name: coder.rules
    rules:
      - alert: CoderdCPUUsage
        expr: max by (pod) (rate(container_cpu_usage_seconds_total{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}[10m])) / max by(pod) (kube_pod_container_resource_limits{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`, resource="cpu"}) > 0.9
        for: 10m
        annotations:
          summary: The Coder instance {{ $labels.pod }} is using high amounts of CPU, which may impact application performance.
        labels:
          severity: critical
      - alert: CoderdCPUUsage
        expr: max by (pod) (rate(container_cpu_usage_seconds_total{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}[10m])) / max by(pod) (kube_pod_container_resource_limits{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`, resource="cpu"}) > 0.8
        for: 10m
        annotations:
          summary: The Coder instance {{ $labels.pod }} is using high amounts of CPU, which may impact application performance.
        labels:
          severity: warning
      - alert: CoderdMemoryUsage
        expr: max by (pod) (container_memory_working_set_bytes{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}) / max by (pod) (kube_pod_container_resource_limits{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`, resource="memory"})  > 0.9
        for: 10m
        annotations:
          summary: The Coder instance {{ $labels.pod }} is using high amounts of memory, which may lead to an Out-Of-Memory (OOM) error.
        labels:
          severity: critical
      - alert: CoderdMemoryUsage
        expr: max by (pod) (container_memory_working_set_bytes{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}) / max by (pod) (kube_pod_container_resource_limits{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`, resource="memory"})  > 0.8
        for: 10m
        annotations:
          summary: The Coder instance {{ $labels.pod }} is using high amounts of memory, which may lead to an Out-Of-Memory (OOM) error.
        labels:
          severity: warning
      - alert: CoderdRestarts
        expr: sum by(pod) (increase(kube_pod_container_status_restarts_total{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}[10m])) > 3
        for: 1m
        annotations:
          summary: The Coder instance {{ $labels.pod }} has restarted multiple times in the last 10m, which may indicate a CrashLoop.
        labels:
          severity: critical
      - alert: CoderdRestarts
        expr: sum by(pod) (increase(kube_pod_container_status_restarts_total{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}[10m])) > 1
        for: 1m
        annotations:
          summary: The Coder instance {{ $labels.pod }} has restarted multiple times in the last 10m, which may indicate a CrashLoop.
        labels:
          severity: notify
      - alert: CoderdRestarts
        expr: sum by(pod) (increase(kube_pod_container_status_restarts_total{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}[10m])) > 2
        for: 1m
        annotations:
          summary: The Coder instance {{ $labels.pod }} has restarted multiple times in the last 10m, which may indicate a CrashLoop.
        labels:
          severity: warning
      - alert: CoderdReplicas
        expr: sum(up{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}) < 1
        for: 5m
        annotations:
          summary: Number of alive coderd replicas is below the threshold = 1.
        labels:
          severity: critical
      - alert: CoderdReplicas
        expr: sum(up{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}) < 3
        for: 5m
        annotations:
          summary: Number of alive coderd replicas is below the threshold = 3.
        labels:
          severity: notify
      - alert: CoderdReplicas
        expr: sum(up{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`}) < 2
        for: 5m
        annotations:
          summary: Number of alive coderd replicas is below the threshold = 2.
        labels:
          severity: warning
      - alert: CoderdWorkspaceBuildFailures
        expr: sum(increase(coderd_workspace_builds_total{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`, status="failed" }[10m])) > 10
        for: 10m
        annotations:
          summary: Workspace builds have failed multiple times in the last 10m, which may indicate a broken Coder template.
        labels:
          severity: critical
      - alert: CoderdWorkspaceBuildFailures
        expr: sum(increase(coderd_workspace_builds_total{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`, status="failed" }[10m])) > 2
        for: 10m
        annotations:
          summary: Workspace builds have failed multiple times in the last 10m, which may indicate a broken Coder template.
        labels:
          severity: notify
      - alert: CoderdWorkspaceBuildFailures
        expr: sum(increase(coderd_workspace_builds_total{pod=~`coder.*`, pod!~`.*provisioner.*`, namespace=`coder`, status="failed" }[10m])) > 5
        for: 10m
        annotations:
          summary: Workspace builds have failed multiple times in the last 10m, which may indicate a broken Coder template.
        labels:
          severity: warning
      - alert: CoderdIneligiblePrebuilds
        expr: max by (template_name, preset_name) (coderd_prebuilds_running - coderd_prebuilds_eligible) > 0
        for: 10m
        annotations:
          summary: >
            {{ $value }} prebuilt workspace(s) are currently ineligible for claiming for the "{{ $labels.template_name }}" template and "{{ $labels.preset_name }}" preset.
            This usually indicates that the agent has not started correctly, or is still running its startup scripts after an extended period of time.
        labels:
          severity: notify
      - alert: CoderdUnprovisionedPrebuiltWorkspaces
        expr: max by (template_name, preset_name) (coderd_prebuilds_desired - coderd_prebuilds_running) > 0
        for: 10m
        annotations:
          summary: >
            {{ $value }} prebuilt workspace(s) not yet been provisioned for the "{{ $labels.template_name }}" template and "{{ $labels.preset_name }}" preset.
        labels:
          severity: warn
